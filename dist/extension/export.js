(function() {
  const Export = {
    handleExportChat: function() {
      const format = 'markdown'; // Default to markdown
      let content = '';
      const fileName = `tabtalk-chat-${new Date().toISOString().slice(0, 10)}.${format === 'markdown' ? 'md' : 'txt'}`;
      if (!this.pageTitle || !this.currentTab) {
        alert('Missing context to export chat.');
        return;
      }
      if (!Array.isArray(this.chatHistory)) {
        alert('No chat history to export.');
        return;
      }
      if (format === 'markdown') {
        content = `# TabTalk AI Chat - ${this.pageTitle.textContent}\n\n`;
        content += `URL: ${this.currentTab.url}\n`;
        content += `Date: ${new Date().toLocaleString()}\n\n`;
        this.chatHistory.forEach(msg => {
          if (msg.role === 'user') {
            content += `## ${this.userDisplayName || 'You'}\n\n${msg.content}\n\n`;
          } else {
            content += `## TabTalk AI\n\n${msg.content}\n\n`;
          }
        });
      } else {
        content = `TabTalk AI Chat - ${this.pageTitle.textContent}\n\n`;
        content += `URL: ${this.currentTab.url}\n`;
        content += `Date: ${new Date().toLocaleString()}\n\n`;
        this.chatHistory.forEach(msg => {
          if (msg.role === 'user') {
            content += `${this.userDisplayName || 'You'}: ${msg.content}\n\n`;
          } else {
            content += `TabTalk AI: ${msg.content}\n\n`;
          }
        });
      }
      const blob = new Blob([content], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = fileName;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    },

    exportAnalysisToPdf: async function(message) {
      console.log(`TabTalk AI: Exporting analysis report to PDF`);
      
      // Show loading status
      this.setLoading(true, 'Generating PDF...');
      
      try {
        // Ensure marked is available for markdown -> HTML conversion
        if (!this.marked && typeof this.ensureMarked === 'function') {
          await this.ensureMarked();
        }
        // Extract the content without the title prefix
        let content = message.content;
        if (content.startsWith('ðŸ“Š **Analysis Report of This Page**')) {
          content = content.split('\n\n').slice(1).join('\n\n');
        }
        const tempContainer = document.createElement('div');
        tempContainer.style.position = 'absolute';
        tempContainer.style.left = '-9999px';
        tempContainer.style.top = '-9999px';
        document.body.appendChild(tempContainer);
        const pageTitle = this.pageTitle ? this.pageTitle.textContent : 'Untitled Page';
        const pageUrl = this.currentTab ? this.currentTab.url : 'Unknown URL';
        const date = new Date().toLocaleString();
        const htmlContent = `
          <html>
          <head>
            <title>Analysis Report - ${pageTitle}</title>
            <style>
              body { font-family: Arial, sans-serif; margin: 20px; color: #333; line-height: 1.5; }
              .header { text-align: center; margin-bottom: 20px; padding-bottom: 10px; border-bottom: 1px solid #ccc; }
              .title { font-size: 20px; font-weight: bold; margin-bottom: 5px; }
              .info { font-size: 12px; color: #666; margin-bottom: 5px; }
              h1 { font-size: 18px; margin-top: 20px; margin-bottom: 10px; padding-bottom: 5px; border-bottom: 1px solid #eee; }
              h2 { font-size: 16px; margin-top: 15px; margin-bottom: 8px; }
              p { margin-bottom: 10px; }
              ul, ol { margin-top: 8px; margin-bottom: 16px; padding-left: 20px; }
              li { margin-bottom: 5px; }
              .footer { margin-top: 30px; text-align: center; font-size: 12px; color: #999; padding-top: 10px; border-top: 1px solid #eee; }
            </style>
          </head>
          <body>
            <div class="header">
              <div class="title">Analysis Report</div>
              <div class="info">Page: ${pageTitle}</div>
              <div class="info">URL: ${pageUrl}</div>
              <div class="info">Generated: ${date}</div>
            </div>
            <div class="content">
              ${this.marked ? this.marked.parse(content) : content}
            </div>
            <div class="footer">Generated by TabTalk AI</div>
          </body>
          </html>
        `;
        tempContainer.innerHTML = htmlContent;
        if (typeof html2pdf === 'undefined') {
          throw new Error('PDF generation library not available');
        }
        const element = tempContainer;
        const options = {
          margin: 10,
          filename: `analysis-report-${new Date().toISOString().slice(0, 10)}.pdf`,
          image: { type: 'jpeg', quality: 0.98 },
          html2canvas: { scale: 2 },
          jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' }
        };
        html2pdf()
          .from(element)
          .set(options)
          .save()
          .then(() => {
            document.body.removeChild(tempContainer);
            this.setLoading(false);
          })
          .catch(error => {
            console.error('Error generating PDF:', error);
            alert('Error generating PDF: ' + error.message);
            document.body.removeChild(tempContainer);
            this.setLoading(false);
          });
      } catch (error) {
        console.error('Error setting up PDF generation:', error);
        alert('Error generating PDF: ' + error.message);
        this.setLoading(false);
      }
    }
  };
  window.TabTalkExport = Export;
})();
